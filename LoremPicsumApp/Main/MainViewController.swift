//
//  MainViewController.swift
//  LoremPicsumApp
//
//  Created by Aleksandr Kretov on 14.11.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SwiftUI
import SnapKit

protocol MainDisplayLogic: AnyObject {
    func display(viewModel: Main.ViewModel)
}

class MainViewController: UIViewController {
    
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    let randomImageBuilder: RandomImageBuilder
    let galleryBuilder: GalleryBuilder
    
    let fetcher: NetworkFetcher
    
    //MARK: Views
    
    private var imageView: UIImageView = {
       let view = UIImageView()
        view.contentMode = .scaleAspectFill
        let blurEffect = UIBlurEffect(style: .regular)
        let blurredView = UIVisualEffectView(effect: blurEffect)
        blurredView.frame = view.bounds
        blurredView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        blurredView.alpha = 1
        view.addSubview(blurredView)
        return view
    }()
    
    private var loadingIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(style: .large)
        indicator.hidesWhenStopped = true
        indicator.startAnimating()
        return indicator
    }()
    
    private lazy var randomButton: UIButton = {
       let button = UIButton()
        button.layer.cornerRadius = 12
        button.backgroundColor = .red
        button.setTitle("Show Random Image", for: .normal)
        button.titleLabel?.font = UIFont.boldSystemFont(ofSize: 20)
        button.titleLabel?.layer.shadowColor = UIColor.black.cgColor
        button.titleLabel?.layer.shadowOffset = CGSize(width: 0, height: 2)
        button.titleLabel?.layer.shadowRadius = 5
        button.titleLabel?.layer.shadowOpacity = 0.5
        button.layer.shadowColor = UIColor.red.cgColor
        button.layer.shadowRadius = 5
        button.layer.shadowOffset = CGSize(width: 0, height: 4)
        button.layer.shadowOpacity = 0.5
        button.addTarget(self, action: #selector(showRandomVC), for: .touchUpInside)
        return button
    }()
    
    private lazy var galleryButton: UIButton = {
       let button = UIButton()
        button.layer.cornerRadius = 12
        button.backgroundColor = .blue
        button.setTitle("Show Gallery", for: .normal)
        button.titleLabel?.font = UIFont.boldSystemFont(ofSize: 20)
        button.titleLabel?.layer.shadowColor = UIColor.black.cgColor
        button.titleLabel?.layer.shadowOffset = CGSize(width: 0, height: 2)
        button.titleLabel?.layer.shadowRadius = 5
        button.titleLabel?.layer.shadowOpacity = 0.5
        button.layer.shadowColor = UIColor.blue.cgColor
        button.layer.shadowRadius = 5
        button.layer.shadowOffset = CGSize(width: 0, height: 4)
        button.layer.shadowOpacity = 0.5
        button.addTarget(self, action: #selector(showGalleryVC), for: .touchUpInside)
        return button
    }()

    // MARK: Object lifecycle
    init(fetcher: NetworkFetcher, randomImageBuilder: RandomImageBuilder, galleryBuilder: GalleryBuilder) {
        self.fetcher = fetcher
        self.randomImageBuilder = randomImageBuilder
        self.galleryBuilder = galleryBuilder
        super.init(nibName: nil, bundle: nil)
        setup()
    }
//
//    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
//        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
//    }
//
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    

    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let interactor = MainInteractor(fetcher: fetcher)
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupConstaints() {
        view.addSubview(imageView)
        view.addSubview(loadingIndicator)
        view.addSubview(randomButton)
        view.addSubview(galleryButton)
        
        imageView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        
        loadingIndicator.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalToSuperview().offset(UIScreen.main.bounds.maxY / 2 - 50)
        }
        
        randomButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalToSuperview().offset(-40)
            make.width.equalToSuperview().inset(40)
            make.height.equalTo(40)
        }
        
        galleryButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalToSuperview().offset(40)
            make.width.equalToSuperview().inset(40)
            make.height.equalTo(40)
        }
    }
    
    private func setupNavigationBar() {
        // Make navigation bar invisible
        navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
        navigationController?.navigationBar.shadowImage = UIImage()
        navigationController?.navigationBar.isTranslucent = true
        navigationController?.view.backgroundColor = .clear
    }
    
    @objc private func showRandomVC() {
        router?.routeToRandomImageVC()
    }
    
    @objc private func showGalleryVC() {
        router?.routeToGalleryVC()
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        setupConstaints()
        interactor?.makeRequest(request: .loadBackgroundImage)
    }
}

//struct MainViewController_Previews: PreviewProvider {
//    static var previews: some View {
//        MainViewController(fetcher: NetworkFetcher(networkService: NetworkService()), randomImageBuilder: RandomImageComponent(parent: self)).preview()
//    }
//}

extension MainViewController: MainDisplayLogic {
    func display(viewModel: Main.ViewModel) {
        switch viewModel {
        case .displayBackgroundImage(let imageData, let error):
            if let imageData {
                DispatchQueue.main.async { [weak self] in
                    self?.imageView.image = UIImage(data: imageData)
                    self?.loadingIndicator.stopAnimating()
                }
            } else if let error {
                DispatchQueue.main.async { [weak self] in
                    let alert = UIAlertController(title: "OOPS",
                                                  message: "Something went wrong: \(error)",
                                                  preferredStyle: .alert)
                    alert.addAction(UIAlertAction(title: "OK", style: .destructive))
                    self?.present(alert, animated: true)
                }
            }
        }
    }
}
