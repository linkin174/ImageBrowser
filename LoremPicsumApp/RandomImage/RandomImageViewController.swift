//
//  RandomImageViewController.swift
//  LoremPicsumApp
//
//  Created by Aleksandr Kretov on 14.11.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SnapKit
import SwiftUI

protocol RandomImageDisplayLogic: AnyObject {
    func display(viewModel: RandomImage.ViewModel)
}

class RandomImageViewController: UIViewController {
    var interactor: RandomImageBusinessLogic?
    var router: (NSObjectProtocol & RandomImageRoutingLogic & RandomImageDataPassing)?
    
    let fetcher: NetworkFetcher
    
    private var isInterfaceHidden = false
    
    // MARK: Views
    
    private lazy var imageView: UIImageView = {
        let view = UIImageView()
        view.isUserInteractionEnabled = true
        view.image = UIImage(named: "dummy")
        view.contentMode = .scaleAspectFill
        view.onTapGesture(self, #selector(hideInterface))
        return view
    }()
    
    private var indicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(style: .large)
        indicator.color = UIColor.white
        indicator.startAnimating()
        indicator.hidesWhenStopped = true
        return indicator
    }()
    
    private lazy var loadButton: UIButton = {
        let button = UIButton()
        button.backgroundColor = UIColor.blue
        button.setImage(UIImage(systemName: "arrow.triangle.2.circlepath"), for: .normal)
        button.setImage(UIImage(), for: .selected)
        button.imageView?.tintColor = UIColor.white
        button.imageView?.contentMode = .scaleAspectFit
        button.imageEdgeInsets = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)
        button.contentVerticalAlignment = .fill
        button.contentHorizontalAlignment = .fill
        button.layer.cornerRadius = 30
        button.layer.shadowColor = UIColor.black.cgColor
        button.layer.shadowOffset = CGSize(width: 0, height: 5)
        button.layer.shadowRadius = 5
        button.layer.shadowOpacity = 0.5
        button.layer.shouldRasterize = true
        button.layer.rasterizationScale = UIScreen.main.scale
        button.addTarget(self, action: #selector(loadImage), for: .touchUpInside)
        return button
    }()
    
    private lazy var shareButton: UIButton = {
        let button = UIButton()
        button.layer.cornerRadius = 20
        button.backgroundColor = UIColor.white
        button.setImage(UIImage(systemName: "square.and.arrow.up"), for: .normal)
        button.imageView?.tintColor = .black
        button.imageEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: 3, right: 0)
        button.layer.shadowColor = UIColor.black.cgColor
        button.layer.shadowOffset = CGSize(width: 0, height: 5)
        button.layer.shadowRadius = 5
        button.layer.shadowOpacity = 0.5
        button.layer.shouldRasterize = true
        button.layer.rasterizationScale = UIScreen.main.scale
        button.addTarget(self, action: #selector(shareImage), for: .touchUpInside)
        return button
    }()

    // MARK: Object lifecycle
    
    init(fetcher: NetworkFetcher) {
        self.fetcher = fetcher
        super.init(nibName: nil, bundle: nil)
        setup()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: Private methods

    private func setup() {
        let viewController = self
        let interactor = RandomImageInteractor(fetcher: fetcher)
        let presenter = RandomImagePresenter()
        let router = RandomImageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupConstraints() {
        self.view.addSubview(imageView)
        self.view.addSubview(loadButton)
        self.view.addSubview(shareButton)
        loadButton.addSubview(indicator)
        
        imageView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        
        loadButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.bottom.equalToSuperview().inset(40)
            make.width.height.equalTo(60)
        }

        shareButton.snp.makeConstraints { make in
            make.trailing.equalTo(imageView.snp.trailing).inset(40)
            make.bottom.equalToSuperview().inset(40)
            make.width.height.equalTo(40)
        }

        indicator.snp.makeConstraints { make in
            make.center.equalToSuperview()
        }
    }

    
    @objc private func loadImage() {
        interactor?.makeRequest(request: .loadRandomImage)
        loadButton.isSelected = true
        indicator.startAnimating()
        shareButton.isEnabled = false
    }
    
    @objc private func shareImage() {
        guard let image = imageView.image else { return }
        let shareSheet = UIActivityViewController(activityItems: [image], applicationActivities: nil)
        present(shareSheet, animated: true)
    }
    
    @objc private func hideInterface() {
        if isInterfaceHidden {
            shareButton.animateFade(.fadeIn, 0.5)
            loadButton.animateFade(.fadeIn, 0.5)
            navigationItem.setHidesBackButton(false, animated: true)
        } else {
            shareButton.animateFade(.fadeOut, 0.5)
            loadButton.animateFade(.fadeOut, 0.5)
            navigationItem.setHidesBackButton(true, animated: true)
        }
        isInterfaceHidden.toggle()
    }


    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupConstraints()
        loadImage()
        navigationController?.navigationBar.tintColor = UIColor.red
    }
}

extension RandomImageViewController: RandomImageDisplayLogic {
    func display(viewModel: RandomImage.ViewModel) {
        switch viewModel {
        case .displayRandom(let image):
            DispatchQueue.main.async { [unowned self] in
                self.imageView.image = image
                self.loadButton.isSelected = false
                self.indicator.stopAnimating()
                self.shareButton.animateFade(.fadeIn, 0.5)
                self.shareButton.isEnabled = true
            }
        case .display(let error):
            showAlert("Error Loading Image", "Something went wrong: \(error). Check your internet connection and try again")
        }
    }
}

struct RandomImageVC_Previews: PreviewProvider {
    static var previews: some View {
        RandomImageViewController(fetcher: NetworkFetcher(networkService: NetworkService()))
            .preview()
    }
}
