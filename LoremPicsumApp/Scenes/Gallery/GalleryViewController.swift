//
//  GalleryViewController.swift
//  LoremPicsumApp
//
//  Created by Aleksandr Kretov on 14.11.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SnapKit
import SwiftUI

protocol GalleryDisplayLogic: AnyObject {
    func display(viewModel: Gallery.Display)
}

class GalleryViewController: UIViewController {
    // MARK: Public Properties

    var interactor: GalleryBusinessLogic?
    var router: (NSObjectProtocol & GalleryRoutingLogic & GalleryDataPassing)?
    let fetcher: FetchingProtocol
    let photoDetailsBuilder: PhotoDetailsBuilder?

    // MARK: Private properties

    private var photos: [PhotoViewModel] = [] {
        didSet {
            collectionView.reloadData()
        }
    }

    private var lastContentOffset = CGPoint(x: 0, y: 0)

    // MARK: Views

    lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let screenWidth = UIScreen.main.bounds.maxX
        let defaultInset: CGFloat = 8
        let itemSapicing = defaultInset / 2 // Same spacing between cells and edges of the screen
        let cellEdgeSize = screenWidth / 2 - defaultInset * 2 + itemSapicing
        layout.itemSize = CGSize(width: cellEdgeSize, height: cellEdgeSize)
        layout.minimumLineSpacing = defaultInset
        layout.minimumInteritemSpacing = defaultInset
        layout.sectionInset = UIEdgeInsets(top: defaultInset,
                                           left: defaultInset,
                                           bottom: defaultInset,
                                           right: defaultInset)
        let collection = UICollectionView(frame: view.frame,
                                          collectionViewLayout: layout)
        collection.backgroundColor = .clear
        return collection
    }()

    private lazy var backNavigationButton: UIBarButtonItem = {
        let button = UIButton(type: .custom)
        button.setBackgroundImage(UIImage(systemName: "arrowshape.turn.up.backward.fill"),
                                  for: .normal)
        button.imageView?.contentMode = .scaleAspectFill
        button.tintColor = #colorLiteral(red: 0.1401333511, green: 0.3946738243, blue: 0.563154757, alpha: 1)
        button.contentVerticalAlignment = .fill
        button.contentHorizontalAlignment = .fill
        button.frame.size = CGSize(width: 30, height: 30)
        button.dropShadow(color: .black, offsetX: 0, offsetY: 3, radius: 3)
        button.addTarget(self, action: #selector(tapBack), for: .touchUpInside)
        let barButton = UIBarButtonItem(customView: button)
        return barButton
    }()

    // MARK: Initializers

    init(fetcher: FetchingProtocol, photoDetailsBuilder: PhotoDetailsBuilder?) {
        self.photoDetailsBuilder = photoDetailsBuilder
        self.fetcher = fetcher
        super.init(nibName: nil, bundle: nil)
        setup()
    }

    @available(*, unavailable)
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - Private Methods

    private func setup() {
        let viewController = self
        let interactor = GalleryInteractor(fetcher: fetcher)
        let presenter = GalleryPresenter()
        let router = GalleryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    private func setupNavigationBar() {
        let appearence = UINavigationBarAppearance()
        appearence.backgroundColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        appearence.shadowColor = .black
        tabBarController?.navigationController?.navigationBar.standardAppearance = appearence
        tabBarController?.navigationController?.navigationBar.scrollEdgeAppearance = appearence
        navigationItem.leftBarButtonItem = backNavigationButton
    }

    private func setupNavigationTitle() {
        let label = UILabel()
        label.text = "100 Photos on first page"
        label.font = .sparkyStones(of: 20)
        navigationItem.titleView = label
    }

    private func setupLayout() {
        view.addSubview(collectionView)
        collectionView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }

    @objc private func tapBack() {
        tabBarController?.dismiss(animated: true)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        setupLayout()
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(PhotoCell.self, forCellWithReuseIdentifier: "cell")
        interactor?.make(request: .fetchPhotos(page: 1, perPage: 100))
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupNavigationBar()
        setupNavigationTitle()
    }
}

// MARK: Extensions

extension GalleryViewController: GalleryDisplayLogic {
    func display(viewModel: Gallery.Display) {
        switch viewModel {
        case .displayPhotos(let photos):
            DispatchQueue.main.async {
                self.photos = photos
            }
        case .display(let error):
            DispatchQueue.main.async {
                self.showAlert("OOPS", error)
            }
        }
    }
}

extension GalleryViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        photos.count
    }

    func collectionView(_ collectionView: UICollectionView,
                        cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as? PhotoCell
        else {
            return UICollectionViewCell()
        }
        let urlString = photos[indexPath.item].previewUrl
        cell.setup(with: urlString)
        cell.backgroundColor = .clear
        cell.contentView.alpha = 0
        cell.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)
        return cell
    }

    func collectionView(_ collectionView: UICollectionView,
                        willDisplay cell: UICollectionViewCell,
                        forItemAt indexPath: IndexPath) {
        let animationDuration = 0.4
        let basicDelay = 0.2
        let column = Double(cell.frame.minX / cell.frame.width)
        let row = Double(cell.frame.minY / cell.frame.height)
        let distance = sqrt(pow(column, 2) + pow(row, 2))
        var totalDelay: Double = 0
        if indexPath.item <= collectionView.visibleCells.count {
            totalDelay = sqrt(distance) * basicDelay
        } else {
            if indexPath.item % 2 == 0 {
                totalDelay = 0
            } else {
                totalDelay = 0.1
            }
        }
        UIView.animate(withDuration: animationDuration, delay: sqrt(totalDelay)) {
            cell.contentView.alpha = 1
            cell.transform = CGAffineTransform.identity
        }
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.routeToDetailsVC()
    }

    func collectionView(_ collectionView: UICollectionView,
                        contextMenuConfigurationForItemAt indexPath: IndexPath,
                        point: CGPoint) -> UIContextMenuConfiguration? {
        let config = UIContextMenuConfiguration(identifier: indexPath as NSIndexPath,
                                                previewProvider: {
                                                    PhotoDetailsViewController(fetcher: NetworkFetcher(networkService: NetworkService()))
                                                }, actionProvider: nil)
        return config
    }
}

// MARK: Preview

struct GalleryView_Previews: PreviewProvider {
    static var previews: some View {
        GalleryViewController(fetcher: NetworkFetcher(networkService: NetworkService()), photoDetailsBuilder: nil)
            .makePreview()
    }
}
