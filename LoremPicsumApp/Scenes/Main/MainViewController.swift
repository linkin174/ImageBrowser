//
//  MainViewController.swift
//  LoremPicsumApp
//
//  Created by Aleksandr Kretov on 14.11.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SnapKit
import SwiftUI
import UIKit

protocol MainDisplayLogic: AnyObject {
    func display(viewModel: Main.Display)
}

final class MainViewController: UIViewController {
    // MARK: Public Properties

    let randomImageBuilder: RandomImageBuilder?
    let galleryBuilder: GalleryBuilder?

    // MARK: Private properties

    private var interactor: MainBusinessLogic?
    private var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    private let fetcher: FetchingProtocol

    // MARK: Views

    private lazy var imageView: UIImageView = {
        let view = UIImageView(frame: view.bounds)
        view.contentMode = .scaleAspectFill
        let blurEffect = UIBlurEffect(style: .systemMaterialDark)
        let blurredView = UIVisualEffectView(effect: blurEffect)
        blurredView.frame = view.bounds
        blurredView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        blurredView.alpha = 0.8
        view.addSubview(blurredView)
        view.alpha = 0
        return view
    }()

    private let loadingIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(style: .large)
        indicator.hidesWhenStopped = true
        indicator.startAnimating()
        indicator.color = #colorLiteral(red: 0.1411764771, green: 0.3960784376, blue: 0.5647059083, alpha: 1)
        return indicator
    }()

    private lazy var randomButton: UIButton = {
        let button = UIButton()
        button.layer.cornerRadius = 12
        button.backgroundColor = .red
        button.setTitle("Show Random Image", for: .normal)
        button.titleLabel?.font = .boldSystemFont(ofSize: 20)
        button.titleLabel?.layer.shadowColor = UIColor.black.cgColor
        button.titleLabel?.layer.shadowOffset = CGSize(width: 0, height: 2)
        button.titleLabel?.layer.shadowRadius = 5
        button.titleLabel?.layer.shadowOpacity = 0.5
        button.dropShadow(color: .red, offsetX: 0, offsetY: 4)
        button.addTarget(self, action: #selector(showRandomVC), for: .touchUpInside)
        return button
    }()

    private lazy var galleryButton: UIButton = {
        let button = UIButton(type: .custom)
        button.layer.cornerRadius = 12
        button.backgroundColor = .blue
        button.setTitle("Show Gallery", for: .normal)
        button.titleLabel?.font = UIFont.boldSystemFont(ofSize: 20)
        button.titleLabel?.layer.shadowColor = UIColor.black.cgColor
        button.titleLabel?.layer.shadowOffset = CGSize(width: 0, height: 2)
        button.titleLabel?.layer.shadowRadius = 5
        button.titleLabel?.layer.shadowOpacity = 0.5
        button.dropShadow(color: .blue, offsetX: 0, offsetY: 4)
        button.addTarget(self, action: #selector(showGalleryVC), for: .touchUpInside)
        return button
    }()

    // MARK: Initializers

    init(fetcher: FetchingProtocol, randomImageBuilder: RandomImageBuilder?, galleryBuilder: GalleryBuilder?) {
        self.fetcher = fetcher
        self.randomImageBuilder = randomImageBuilder
        self.galleryBuilder = galleryBuilder
        super.init(nibName: nil, bundle: nil)
        setup()
    }

    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = #colorLiteral(red: 0.2549019754, green: 0.2745098174, blue: 0.3019607961, alpha: 1)
        setupConstaints()
        interactor?.makeRequest(request: .loadBackgroundImage)
    }

    // MARK: Setup Module

    private func setup() {
        let viewController = self
        let interactor = MainInteractor(fetcher: fetcher)
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Private Methods

    private func setupConstaints() {
        view.addSubview(imageView)
        view.addSubview(loadingIndicator)
        view.addSubview(randomButton)
        view.addSubview(galleryButton)
        let buttonOffset = UIScreen.main.bounds.midY + 50

        loadingIndicator.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.bottom.equalToSuperview().inset(30)
        }

        randomButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalToSuperview().offset(buttonOffset)
            make.width.equalToSuperview().inset(40)
            make.height.equalTo(40)
        }

        galleryButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalToSuperview().offset(buttonOffset)
            make.width.equalToSuperview().inset(40)
            make.height.equalTo(40)
        }
    }

    private func showButtons() {
        UIView.animate(withDuration: 1, delay: 0.25, usingSpringWithDamping: 0.7, initialSpringVelocity: 1) {
            self.galleryButton.snp.updateConstraints { make in
                make.centerY.equalToSuperview().offset(40)
            }
            self.randomButton.snp.updateConstraints { make in
                make.centerY.equalToSuperview().offset(-40)
            }
            self.view.layoutIfNeeded()
        }
    }

    private func animateImageView() {
        UIView.animate(withDuration: 0.8) {
            self.imageView.alpha = 1
        }
    }

    @objc private func showRandomVC() {
        router?.routeToRandomImageVC()
    }

    @objc private func showGalleryVC() {
        router?.routeToGalleryVC()
    }
}

// MARK: Preview

struct MainViewController_Previews: PreviewProvider {
    static var previews: some View {
        MainViewController(fetcher: NetworkFetcher(networkService: NetworkService()),
                           randomImageBuilder: nil, galleryBuilder: nil)
            .makePreview()
    }
}

// MARK: Extensions

extension MainViewController: MainDisplayLogic {
    func display(viewModel: Main.Display) {
        switch viewModel {
        case .displayBackgroundImage(let image):
            DispatchQueue.main.async { [unowned self] in
                imageView.image = image
                loadingIndicator.stopAnimating()
                animateImageView()
                showButtons()
            }
        case .displayError(let text):
            DispatchQueue.main.async { [unowned self] in
                self.showAlert("OPPS", "Something went wrong. Error: \(text)")
            }
        }
    }
}
