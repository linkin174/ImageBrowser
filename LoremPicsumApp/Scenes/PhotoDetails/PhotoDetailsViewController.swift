//
//  PhotoDetailsViewController.swift
//  LoremPicsumApp
//
//  Created by Aleksandr Kretov on 03.12.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SnapKit
import SwiftUI

protocol PhotoDetailsDisplayLogic: AnyObject {
    func display(viewModel: PhotoDetails.Display)
}

class PhotoDetailsViewController: UIViewController {

    // MARK: Public properties

    var router: (NSObjectProtocol & PhotoDetailsRoutingLogic & PhotoDetailsDataPassing)?

    // MARK: Private Properties

    private var interactor: PhotoDetailsBusinessLogic?
    private let fetcher: FetchingProtocol
    private var imageURL: URL?

    // MARK: Views

    private let imageView: WebImageView = {
        let imageView = WebImageView()
        imageView.image = UIImage(named: "dummy")
        imageView.contentMode = .scaleAspectFill
        imageView.dropShadow(color: .black, offsetX: 5, offsetY: 5)
        return imageView
    }()

    private lazy var authorLabel: UILabel = {
        let label = UILabel()
        label.isUserInteractionEnabled = true
        label.textColor = .black
        label.font = .systemFont(ofSize: 24, weight: .bold)
        label.numberOfLines = 2
        label.lineBreakMode = .byWordWrapping
        label.textAlignment = .left
        label.dropShadow(color: .black, offsetX: 3, offsetY: 3, opacity: 0.3)
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(openURL))
        label.addGestureRecognizer(tapGesture)
        return label
    }()

    // MARK: Initializers

    init(fetcher: FetchingProtocol) {
        self.fetcher = fetcher
        super.init(nibName: nil, bundle: nil)
        setup()
    }

    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        interactor?.make(request: .viewDidLoad)
    }

    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        setupConstraints()
    }

    // MARK: Private Methods

    private func setup() {
        let viewController = self
        let interactor = PhotoDetailsInteractor()
        let presenter = PhotoDetailsPresenter()
        let router = PhotoDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    private func setupConstraints() {
        view.addSubview(authorLabel)
        view.addSubview(imageView)

        imageView.snp.makeConstraints { make in
            let imageRatio = (imageView.image?.size.height ?? 1) / (imageView.image?.size.width ?? 1)
            make.center.equalToSuperview()
            make.width.equalToSuperview()
            make.height.equalTo(imageView.snp.width).multipliedBy(imageRatio)
        }

        authorLabel.snp.makeConstraints { make in
            make.width.equalToSuperview().inset(16)
            make.centerX.equalToSuperview()
            make.bottom.equalTo(imageView.snp.top).offset(-16)
        }
    }

    // MARK: Selectors

    @objc private func openURL() {
        router?.presentSafariView(with: imageURL)
    }
}

// MARK: Extensions

extension PhotoDetailsViewController: PhotoDetailsDisplayLogic {
    func display(viewModel: PhotoDetails.Display) {
        switch viewModel {
        case .displayPreview(let previewImage):
            imageView.image = previewImage
            view.backgroundColor = previewImage.findAverageColor(algorithm: .squareRoot)
        case .displayPhoto(let photo):
            imageView.set(from: photo.downloadUrl)
            authorLabel.attributedText = makyHyperlinkString(for: photo.author)
            imageURL = photo.url
        }
    }

    private func makyHyperlinkString(for text: String) -> NSMutableAttributedString {
        let mutableString = NSMutableAttributedString(string: "Photo by: \(text)")
        let range = mutableString.mutableString.range(of: text)
        mutableString.addAttribute(.link, value: text, range: range)
        return mutableString
    }
}

// MARK: Previews

struct PhotoDetails_Previews: PreviewProvider {
    static var previews: some View {
        PhotoDetailsViewController(fetcher: NetworkFetcher(networkService: NetworkService()))
            .makePreview()
    }
}
